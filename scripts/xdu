#!/usr/bin/env ruby

require 'cliqr'
require 'filesize'
require 'pty'

cli = Cliqr.interface do
  name 'xdu'
  description <<-EOS
A extended disk usage facility.

Currently supports:
- Get list of top files sorted by size
EOS
  version '0.1.0'
  shell :disable

  action :list do
    description 'print list of top n files sorted by size'

    option :depth do
      short 'd'
      description 'Depth until which you want to search for files.'
      type :numeric
      default 0
    end

    option 'min-size' do
      short 'm'
      description 'Minimum size of the file you are looking to find (use B for bytes, K for kilobytes, M for megabytes, G for gigabytes and T for terabytes).'
      default '0B'
    end

    handler do
      basedir = File.expand_path(File.dirname(File.dirname(__FILE__)))
      raw_listing = `find #{Dir.pwd} -maxdepth #{depth} -exec stat --printf=\"%s %n \\n\" \"{}\" \\; | awk -f #{basedir}/lib/xdu.awk`
      files = []
      raw_listing.split("\n").each do |line|
        files << FileInfo.new(line)
      end

      min_size_bytes = to_bytes(option('min-size').to_s)

      format="%-10s%s\n"
      printf(format, "Size", "Name")
      printf(format, "----", "------------")
      files
        .sort
        .select { |file| !file.is_dir and file.size > min_size_bytes }
        .each { |file| printf(format, file.size_str, file.name) }
    end
  end
end

SIZE_CONSTANTS =   {
  'B'  => 1024,
  'K' => 1024 * 1024,
  'M' => 1024 * 1024 * 1024,
  'G' => 1024 * 1024 * 1024 * 1024,
  'T' => 1024 * 1024 * 1024 * 1024 * 1024
}

def to_size_str(bytes)
  SIZE_CONSTANTS.each_pair { |e, s| return "#{(bytes.to_f / (s / 1024)).round(2)}#{e}" if bytes < s }
end

def to_bytes(size)
  multiplier = SIZE_CONSTANTS[size[-1, 1]] / 1024
  size.to_i * multiplier
end

class FileInfo
  include Comparable

  attr_accessor :size
  attr_accessor :size_str
  attr_accessor :name
  attr_accessor :is_dir

  def initialize(str)
    line = str.split
    @size = line[0].to_i
    @size_str = to_size_str(size)
    @name = line[1]

    @is_dir = File.directory?(name)
  end

  def to_s
    "#{size} #{name}"
  end

  def <=>(other)
    size <=> other.size
  end
end

cli.execute(ARGV)
